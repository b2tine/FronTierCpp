

------------------------------------------------------
The FronTier++ README
------------------------------------------------------

INDEX
	1. Introduction
	2. How to get it
	3. Contents
	4. Configuring and Building 
	5. Examples
	6. Viewing the output
	7. More information

---------------
1. Introduction
---------------

This library package is designed for those who wish to track the dynamic
motion of explicit boundaries or interface in computations. The front 
tracking method provides high resolution tracking for contact discontinuities 
and internal boundaries in continuum medium simulations. This library 
provides an excellent way to design complex fronts in one, two, or three 
dimensions.

----------------
2. How to get it
----------------

The 1.1 release of FronTier++ (released May 2016) is available at: 
http://www.ams.sunysb.edu/~chenx/FronTier++_Manual/download/index.html.  
The most recent branch of the library is in active development and 
available on github: https://github.com/b2tine/FronTierCpp.

git clone https://github.com/b2tine/FronTierCpp.git

-----------
3. Contents
-----------

If the archive is unpacked correctly, you should have the following files and
directories:

The FronTier++/ directory is the "root" directory of the FronTier++ 
distribution. It contains various files required for configuration, 
including build, configure.in, Makefile.in and this README file.

The src/        dir contains source code subdirectories:
src/front/          code for front tracking in FronTier++
src/intfc/          code for interface geometry in FronTier++
src/util/           code for utility functions in FronTier++
example2d/        2d examples showing usage of the FronTier++ API.
example3d/        3d examples showing usage of the FronTier++ API.

The above source code and examples encapsulate the core of FronTier++.  But,
in practice, this library is used as the foundation for more tailored 
applications.  This includes the simulation of various problems in compressible 
and incompressible fluid flow.  Software for these purposes is included in:

iFluid/         code tailoried to problems of incompressible fluids
cFluid/                                   ...  compressible ...
solver/         numerical solvers

The following folders again contain applications of the core software that are
specialized to certain problems.

airfoil/        code for coupled cloth and fluid interactions
Collision/ 	    auxilliary code for cloth and fluid interactions
folding/        code for applications in origami and computational geometry
parachute/      3d code for parachute simulations
parachute2d/    2d ...

crystal/        code for applications in the surface physics of crystals
melting/        additional code for ...
subsurf/        ...

----------------------------
4. Configuring and  Building 
----------------------------

FronTier++ is configured and built using autoconf, configure, and make.

For new users, it is easiest to build FronTier++ with two specifically
configured versions of PETSc.  This design ensures that MPI is configured
correctly and PETSc is optimzed both for performance and debugging.

Configuring FronTier++ with PETSc:
   To download the PETSc package, go to:
	https://www.mcs.anl.gov/petsc/download/index.html
	
   FronTier++ requires PETSc 3.11.3  Most users use two separate builds of 
   PETSc: one optimized for performance and one for debugging.  The 
   instructions below install PETSc correcty in the /usrl/local/pkg/ 
   directory in dirs petsc-3.11.3-opt and petsc-3.11.3-dbg.  The location can 
   be modified by varying the --prefix configuration option.
	
   Full PETSc installation instructions can be found at:
	http://www.mcs.anl.gov/petsc/documentation/installation.html
	
   Installing and configuring follows the standard GNU procedure.
   Once PETSc has been unpacked, all of the commands below are run from 
   inside the new directory.  The following assumes PETSc is unpacked
   into /usr/local/pkg/petsc.  To configure the optimized build run 1.a 
   followed by steps 2, 3, and 4.a.  When configuring the debug build 
   run 1.b, 2, 3, and 4.b.  Step 4 tests the build is configured correctly.
   
   1.a  ./configure --prefix=/usr/local/pkg/petsc-3.11.3-opt --PETSC_ARCH=opt \
     --with-cc=gcc --with-cxx=g++ --with-fc=gfortran --with-debugging=0 \
     COPTFLAGS="-O3 -march=native -mtune=native" \
     FOPTFLAGS="-O3 -march=native -mtune=natuve" --download-mpich --download-hypre
 
   1.b  ./configure --prefix=/usr/local/pkg/petsc-3.11.3-dbg \
     --with-cc=gcc --with-cxx=g++ --with-fc=gfortran \
     --download-mpich --download-hypre
     
   2. make PETSC_DIR=/usr/local/pkg/petsc-3.11.3 PETSC_ARCH=arch-linux2-c-debug all
   
   3. make PETSC_DIR=/usr/local/pkg/petsc-3.11.3 PETSC_ARCH=arch-linux2-c-debug install
   
   4.a  make PETSC_DIR=/usr/local/pkg/petsc-3.11.3-opt PETSC_ARCH='' test
   
   4.b  make PETSC_DIR=/usr/local/pkg/petsc-3.11.3-dbg PETSC_ARCH='' test

   Now, in the FronTier++/ directory simply type "./build" or "./build -d" for debug
   mode.  If the machine is unrecognized, it will prompt the user for the path to the
   correct PETSc version.  The build script recognizes a few systems commonly used by 
   FronTier++ developers and users. For these platforms, the script should work
   automatically in batch mode without user intervention.
   
   ./build
   Unreognized machine.
   Type the PETSc directory to use (opt, dbg):
   /usr/local/pkg/petsc-3.11.0-opt
   using /usr/local/pkg/petsc-3.11.0-opt
   
   ./build
   Machine recognized as Hilbert.

   Note: FronTier++ will automatically be configured for parallel support with OpenMPI,
   and as such it requires ssl.  This can be installed on ubuntu with: 
   
   sudo apt-get install libssl-dev
   

Advanced FronTier++ Configuration: 
   The build script has some command options that control which modules compile.  These can
   be seen by running "./build -h".

  In general you should specify proper MPI wrappers for C, C++, and FORTRAN compilers. 
  If you specify the plain C or FORTRAN compilers instead of MPI wrappers, then FronTier++ 
  will be compiled with MPI disabled. The most complex part of the configuration
  process is the specification for PETSc, since it may be platform and
  version dependent. In general, you should specify the root path for
  PETSc, the PETSC_ARCH variable, and PETSC_LIB. It is important that
  the PETSC_ARCH you specified matches with the MPI wrappers you
  specified; otherwise there may be compilation or runtime errors.
  After obtaining these options, build prints out the commands it
  would use to configure and build. You can copy and paste these
  commands for later use, or use them as a template for modification.

  For more advanced users, you may want to configure and build FronTier++ 
  manually, following three steps:
    1. Set environment variables;
    2. Call autoconf
    3. Call ./configure with additional options.

  FronTier++ has a configure.in file, which will produce the configure file when
  "autoconf" is run in the FronTier++ directory.

  Configuring and building FronTier++ requires support for sh, GNU make, and
  the necessary compilers for C, and optionally MPI, PETSc and HDF.


Building the FronTier++ with HDF4 package:
   With the default configuration, all output will be in the VTK file format. 
   But FronTier++ does support HDF4.2r1 for 2D animation. To download this package, go to:
        http://hdf.ncsa.uiuc.edu/release4/obtain.html
   
   Set the environment variables CC=petsc_dir/bin/mpicc and CXX=petsc_dir/bin/mpicxx
   
   Then in the FronTier++/ directory simply type
     "./configure -with-mpi --with-petsc-dir=petsc_path --with-hdf=hdf_path".
   where hdf_path is the directory the HDF is installed and petsc_path is the
   path to your chosen PETSc configuration.  
   
   The inclusion of HDF package gives a user the capability of producing HDF files 
   as output.


Building the FronTier++ with GD package:
   FronTier++ uses GD graphics library for 1D and 2D animations. To download 
   this package, go to:
	http://www.boutell.com/gd/
	
   Set the environment variables CC=petsc_dir/bin/mpicc and CXX=petsc_dir/bin/mpicxx
   
   Then in the FronTier++/ directory simply type
     "./configure -with-mpi --with-petsc-dir=petsc_path --with-gd=gd_path".
   where gd_path is the directory the GD is installed and petsc_path is the
   path to your chosen PETSc configuration.  The inclusion
   of GD package gives user capability of producing animated gif files as 
   output in some of the 1D and 2D problems.

------------
5. Examples
------------

FronTier++ includes two directories of source code using the library.

example2d/       2D template code 
example3d/       3D ...

To compile, simply run `make' inside the desired directory.  

Note: example2d/example00.cpp is heavily commented, and a good place to start.

---------------------
5.a running serially
---------------------

In general, FronTier++ executables need both an input dimension and
and output folder.  The code to execute example00 in example2d is thus:

./example00 -d 2 -o out-00

-----------------------
5.b running in parallel
-----------------------

If FronTier++ is compiled with MPI enabled, example code can be run in parallel.
If you followed the steps above and configured FronTier++ with PETSc then this
should be the case.
 
To run the example in parallel use mpirun.  The -np directive is the number
of processors, and it must be equal or more than the product of the partitions
along all dimensions.  The -p directive is followed by one integer per dimension,
and describes the partitions to sue when parallelizing execution.  For example,

mpirun -np 4 ./example00 -d 2 -p 2 2 -o out-00

will run example00 with a 2x2 parallel partition.

---------------------
6. Viewing the output
---------------------

After completion, the output director will contain:

run-output      execution log
intfc-ts*       interface files for restarting an interrupted simulation
vtk/            VTK output directory
gview/          Geomview output files

If FronTier++ is linked to the HDF library then a successful run will include
a folder:

hdf/            HDF aniimation files

Note: an HDF file can be converted to a gif using hdf2gif, for example:

hdf2gif comp.hdf comp.gif
animate comp.gif

The VTK folder will contain subdirectories.  If run serially, each time step will have
one subdirectory.  In parallel, each time step and node will have its own folder.
For example:

output-vtk.ts00000/
output-vtk.ts00001/
output-vtk.ts00002/
...

Or,

output-vtk.ts00000-nd0000/
output-vtk.ts00000-nd0001/
output-vtk.ts00000-nd0002/
...

The number following 'nd' is the processor ID number, and the number following 'ts'
is the time step number.

Each of these contain VTK files for the interface during the named time step. 
2D examples have one file in each of the output-vtk.ts* directories named 
2d-intfc.vtk. 3D examples will have two files in each: 3d-intfc.vtk and box.vtk.
 
The *-intfc.vtk file is always the one of interest. box.vtk contains
the bounding box data for the computational region (which, in some cases, may be useful).

Note: if HDF output is enabled, the serial and parallel example will both produce a 
single HDF file, which can be viewed in the way described above.

To view these VTK files, we suggest using ParaView. (https://www.paraview.org/)

In addition, more information on the Geomview output format can be found at: 
http://www.geomview.org/.

--------------------
7. More information
--------------------

FronTierCpp/example2d/exampl00.cpp is a line-by-line detailed illustration of 
how to use the FronTierCpp methods and data structures to model a rotating 
disc.  The example shows how FrontTracking can preserve sharp boundaries
with no numerical dissipation.

A full documentation of the FronTier API can be found at: 
http://www.ams.sunysb.edu/~linli/FronTier++_dxy/html/index.html

Visualizations and demos of additional applications can be found at:
http://www.ams.sunysb.edu/~linli/FTruns/index.html

